// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/b9642fb8ac07f7164dc643ddd1fa99b58ae9be8b/react/react-dom.d.ts
import { React } from 'react';

export namespace ReactDom {
    function findDOMNode<E extends Element>(instance: React.ReactInstance): E;
    function findDOMNode(instance: React.ReactInstance): Element;

    function render<P extends React.DOMAttributes, T extends Element>(
        element: React.DOMElement<P, T>,
        container: Element,
        callback?: (element: T) => any): T;
    function render<P>(
        element: React.SFCElement<P>,
        container: Element,
        callback?: () => any): void;
    function render<P, T extends React.Component<P, ComponentState>>(
        element: React.CElement<P, T>,
        container: Element,
        callback?: (component: T) => any): T;
    function render<P>(
        element: React.ReactElement<P>,
        container: Element,
        callback?: (component?: React.Component<P, ComponentState> | Element) => any): React.Component<P, ComponentState> | Element | void;

    function unmountComponentAtNode(container: Element): boolean;

    var version: string;

    function unstable_batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void;
    function unstable_batchedUpdates<A>(callback: (a: A) => any, a: A): void;
    function unstable_batchedUpdates(callback: () => any): void;

    function unstable_renderSubtreeIntoContainer<P extends React.DOMAttributes, T extends Element>(
        parentComponent: React.Component<any, any>,
        element: React.DOMElement<P, T>,
        container: Element,
        callback?: (element: T) => any): T;
    function unstable_renderSubtreeIntoContainer<P, T extends React.Component<P, ComponentState>>(
        parentComponent: React.Component<any, any>,
        element: React.CElement<P, T>,
        container: Element,
        callback?: (component: T) => any): T;
    function render<P>(
        parentComponent: React.Component<any, any>,
        element: React.SFCElement<P>,
        container: Element,
        callback?: () => any): void;
    function unstable_renderSubtreeIntoContainer<P>(
        parentComponent: React.Component<any, any>,
        element: React.ReactElement<P>,
        container: Element,
        callback?: (component?: React.Component<P, ComponentState> | Element) => any): React.Component<P, ComponentState> | Element | void;
}

export namespace ReactDomServer {
    function renderToString(element: React.ReactElement<any>): string;
    function renderToStaticMarkup(element: React.ReactElement<any>): string;
    var version: string;
}
